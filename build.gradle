buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'


version = "1.12.2-0.2.8-pre"
group = "net.dark_roleplay"
archivesBaseName = "drpmedieval"

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

minecraft {
    version = "1.12.2-14.23.5.2768"
    runDir = "run"
    
	if (project.hasProperty('mappings_112')) {
		mappings = project.findProperty('mappings_112')
	} else{
		mappings = "snapshot_20180814"
	}
	
	if (project.hasProperty('mc_username')) {
		clientRunArgs += ['--username', project.findProperty('mc_username')]
		if (project.hasProperty('mc_password')) {
			clientRunArgs += ['--password', project.findProperty('mc_password')]
		}
	}
	if (project.hasProperty('mc_uuid')) {
		clientRunArgs += ['--uuid', project.findProperty('mc_uuid')]
	}

	// disable server gui
	serverRunArgs += 'nogui'

	// skip the screen to confirm that you want to load a world with missing registry entries
	serverJvmArgs += '-Dfml.doNotBackup=true'
	clientJvmArgs += '-Dfml.doNotBackup=true'

	// skip having to confirm on server
	serverJvmArgs += '-Dfml.queryResult=confirm'

	//skip jansi warnings in the log
	serverJvmArgs += '-Dlog4j.skipJansi=true'
	clientJvmArgs += '-Dlog4j.skipJansi=true'
}

configurations {
    embed
    compile.extendsFrom(embed)
}

repositories {
	maven {
		name = "JEI"
		url = "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name = "Dark Roleplay"
		url = "https://maven.dark-roleplay.net"
	}
	maven {
		name = "Stop Mod Reposts"
		url = "https://mvn.stopmodreposts.org/"
	}
	maven{
		name = "BoP"
		url = "http://files.minecraftforge.net/maven/"
	}
}

dependencies {
// compile against the JEI API but do not include it at runtime
	deobfProvided "mezz.jei:jei_${mc_version}:${jei_version}:api"
	// at runtime, use the full JEI jar
	runtime "mezz.jei:jei_${mc_version}:${jei_version}"
  	runtime "com.github.glitchfiend.biomesoplenty:BiomesOPlenty:1.12.2-7.0.1.2399:universal"
	
	
	embed "org.stopmodreposts:stopmodreposts:${mc_version}-${stopmodreposts_version}"

	embed "net.dark_roleplay:drplibrary:${mc_version}-${drp_library_version}"

	deobfProvided "darkroleplay:drpcore:${mc_version}-${drp_core_version}"
	deobfProvided "darkroleplay.core_modules:drpcmdates:${mc_version}-${drp_core_module_dates_version}"
	deobfProvided "darkroleplay.core_modules:drpcmcrops:${mc_version}-${drp_core_module_crops_version}"	
	deobfProvided "darkroleplay.core_modules:drpcmmaarg:${mc_version}-${drp_core_module_maarg_version}"
	deobfProvided "darkroleplay.core_modules:drpcmguis:${mc_version}-${drp_core_module_guis_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

//Signing the Jar
task signJar(type: SignJar, dependsOn: reobfJar) {

	if(project.hasProperty('jarSigning.store')){
		keyStore = project.findProperty('jarSigning.store')
		alias = project.findProperty('jarSigning.alias')
		storePass = project.findProperty('jarSigning.storePass')
		keyPass = project.findProperty('jarSigning.keyPass')
		
		inputFile = jar.archivePath
		outputFile = jar.archivePath
	}
}
build.dependsOn signJar

jar{
	into('META-INF/libraries'){
		from configurations.embed
	}

	manifest {
		attributes([
            'ContainedDeps': configurations.embed.collect { it.getName() }.join(' '),
			'Maven-Artifact': "${project.group}:${project.archivesBaseName}:${project.version}",
			'Timestamp': System.currentTimeMillis()
		])
	}
}